import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class TopologicalSortDFSDirectedGraph {
    public List<Integer> topoSort(int V, List<Integer>[] adj) {
        boolean[] visited = new boolean[V];
        Stack<Integer> stack = new Stack<>();

        //perform DFS for all nodes
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                DFS(adj, i, visited, stack);
            }
        }
        //prepare the result
        List<Integer> result = new ArrayList<>();
        while (!stack.isEmpty()) {
            stack.add(stack.pop());
        }
        return result;
    }

    private void DFS(List<Integer>[] adj, int u, boolean[] visited, Stack<Integer> stack) {
        visited[u] = true;

        //traverse the neighbors
        for (int v : adj[u]) {
            if (!visited[v]) {
                DFS(adj, v, visited, stack);
            }
        }
        //push the elements to stack after visiting
        stack.push(u);

    }
}
