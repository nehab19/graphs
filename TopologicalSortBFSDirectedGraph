import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class TopologicalSortBFSDirectedGraph {
    public List<Integer> topoSort(int N, List<Integer>[] adj) {
        Queue<Integer> queue = new LinkedList<>();
        int[] inDegree = new int[N];

        //step 1 : compute in-degree for all vertices
        for (int u = 0; u < N; u++) {
            for (int v : adj[u]) {
                inDegree[v]++;
            }
        }

        //step 2 : Add all vertices with in degree 0 to queue
        for (int i = 0; i < N; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }

        //step 3 : Perform BFS(Kahn's algorithm
        List<Integer> result = new ArrayList<>();
        while (!queue.isEmpty()) {
            int u = queue.poll();
            result.add(u);
            for (int v : adj[u]) {
                //decrease the in degree of adjacent node
                inDegree[v]--;

                //if indegree becomes 0 add in queue
                if (inDegree[v] == 0) {
                    queue.add(v);
                }
            }

        }
        return result;

    }
}
