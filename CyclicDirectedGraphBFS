import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class CyclicDirectedGraphBFS {
    public boolean isCyclic(int N, List<Integer>[] adj) {
        Queue<Integer> queue = new LinkedList<>();
        int[] inDegree = new int[N];
        int count = 0;

        for (int u = 0; u < N; u++) {
            for (int v : adj[u]) {
                inDegree[v]++;
            }
        }

        for (int i = 0; i < N; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
                count++;
            }
        }
        while (!queue.isEmpty()) {
            int u = queue.poll();

            for (int v : adj[u]) {
                inDegree[v]--;

                if (inDegree[v] == 0) {
                    queue.add(v);
                    count++;
                }
            }
        }
        return count != N;
    }
}
