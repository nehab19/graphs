/** leetcode link : https://leetcode.com/problems/course-schedule/ **/

import java.util.*;

public class CourseSchedule {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        int[] indegree = new int[numCourses];

        for (int[] pre : prerequisites) {
            int a = pre[0], b = pre[1];
            adj.computeIfAbsent(b, k -> new ArrayList<>()).add(a);
            //a indegree count will be calculated as it is moving from b->a
            indegree[a]++;
        }
        return topologicalSortCheck(adj, numCourses, indegree);

    }

    private boolean topologicalSortCheck(Map<Integer, List<Integer>> adj, int n, int[] indegree) {
        Queue<Integer> queue = new LinkedList<>();
        int count = 0;

        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                count++;
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int u = queue.poll();

            for (int v : adj.getOrDefault(u, new ArrayList<>())) {
                indegree[v]--;
                if (indegree[v] == 0) {
                    count++;
                    queue.offer(v);
                }
            }
        }
        return count == n;
    }
}
